import * as vscode from 'vscode';
import { DiagnosticLanguage } from '../configuration/languageDescription';
import { Disposable } from '../utils/dispose';
import { TelemetryReporter } from '../logging/telemetry';
import { TypeScriptServiceConfiguration } from '../configuration/configuration';
export declare const enum DiagnosticKind {
    Syntax = 0,
    Semantic = 1,
    Suggestion = 2,
    RegionSemantic = 3
}
export declare class DiagnosticsManager extends Disposable {
    private readonly _diagnostics;
    private readonly _settings;
    private readonly _currentDiagnostics;
    private readonly _pendingUpdates;
    private readonly _updateDelay;
    constructor(owner: string, configuration: TypeScriptServiceConfiguration, telemetryReporter: TelemetryReporter, onCaseInsensitiveFileSystem: boolean);
    dispose(): void;
    reInitialize(): void;
    setValidate(language: DiagnosticLanguage, value: boolean): void;
    setEnableSuggestions(language: DiagnosticLanguage, value: boolean): void;
    updateDiagnostics(file: vscode.Uri, language: DiagnosticLanguage, kind: DiagnosticKind, diagnostics: ReadonlyArray<vscode.Diagnostic>, ranges: ReadonlyArray<vscode.Range> | undefined): void;
    configFileDiagnosticsReceived(file: vscode.Uri, diagnostics: ReadonlyArray<vscode.Diagnostic>): void;
    deleteAllDiagnosticsInFile(resource: vscode.Uri): void;
    deleteDiagnostic(resource: vscode.Uri, diagnostic: vscode.Diagnostic): void;
    getDiagnostics(file: vscode.Uri): ReadonlyArray<vscode.Diagnostic>;
    private scheduleDiagnosticsUpdate;
    private updateCurrentDiagnostics;
    private rebuildAll;
    private rebuildFile;
}
//# sourceMappingURL=diagnostics.d.ts.map